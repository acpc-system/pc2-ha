#!/bin/bash
################################### Shell script that collect info about the PC2 pacemaker cluster, and configure the playbook
################################################## The playbook, after then can be used to setup the pacemaker for PC2server
################################################ Written by: Eng. Ahmed M. Elsayed (ahmed.elsayed@acmacpc.org)
### Exit codes:
##			0: Success
##			1: Missed packages
##			2: Can not find inventory template file
##			3: Can not read from inventory template file
##			4: can not write to temp inventory file
##			5: Can not generate the temp inventory file (j2 step)
##			6: Can not find id_rsa.pub
############################################################Change the following URLS 
#PC2PACKAGE='https://github.com/pc2ccs/nightly-builds/releases/download/v9.8build-6345/pc2-9.8build-6345.develop.zip'
PC2PACKAGE='https://github.com/pc2ccs/nightly-builds/releases/download/v9.9build-6720/pc2-9.9build-6720.develop.tar.gz'
PC2RESOURCEAGENT='https://raw.githubusercontent.com/acpc-system/pc2-ha/main/PC2'
#######################################################################################

declare -A NEEDEDPACKAGES
declare -A WORKERSNODES
declare -A WORKERSTORAGE
declare -A WORKERNODESTIP
MASTERNODEHOSTNAME=""
MASTERNODEIP=""
SSHUSER=""
SSHPASS=""
BECOMEPASS=""
MDNSIF=""
CLUSTERMEMBERS=""
function checkPackages {
	ERR=0
	for PACKAGE in ${!NEEDEDPACKAGES[@]}
	do
		CO=$(which ${PACKAGE}|wc -l)
		if [ ${CO} -eq 0 ] 
		then
			echo "Missed package ${NEEDEDPACKAGES[$PACKAGE]}, please install it first"
			ERR=1
		else
			echo "${NEEDEDPACKAGES[$PACKAGE]} .. DONE"
		fi
	done
	if [ ${ERR} -eq 1 ]
	then
		echo "Please install missed package(s) and try again"
		exit 1
	fi
}

function readInput {
	TYPE=${1}
	MSG=${2}
	CONT=1
	while [ ${CONT} -eq 1 ]
	do
		if [ ${TYPE} == "password" ]
		then
			read -s -p "${MSG} : " USERINPUT
		else
			read -p "${MSG} : " USERINPUT
		fi
		case ${TYPE} in
			"hostname")
				## The hostname must be single word, without space,.,any special character other _ 
				CO=$(echo ${USERINPUT} | grep  "[^a-zA-Z0-9\-_]"|wc -l)
				if [ ${CO} -gt 0 ]
				then
					echo "Invalid hostname value,The hostname contains characters, numbers, _ "
				else
					CONT=0
				fi
				
				;;
			"string")
				CONT=0
				;;
			"password")
				CONT=0
				;;
			"integer")
				CO=$(echo ${USERINPUT} | grep "[^0-9]"|wc -l)
				if [ ${CO} -gt 0 ]
                                then
                                        echo "Invalid number,it must be integer"
                                else
					if [ ${USERINPUT} -gt 0 ]
					then
                                        	CONT=0
					else
						echo "Must be greater than 0"
					fi
                                fi
				;;
			"ipv4")
				CO=$(ipcalc ${USERINPUT} 2> /dev/null|grep INVALID | wc -l )
				if [ ${CO} -gt 0 ]
				then
					echo "Invalid IPv4 value"
				else
					CONT=0
				fi
				;;
		esac
	done
	echo ${USERINPUT}
}


function saveValues {
	##Generate yaml file in /tmp
	FILENAME=$( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-12} | head -n 1)
	DATAFILE="/tmp/${FILENAME}.yaml"
	DATARESFILE="/tmp/${FILENAME}-res.yaml"
	TMPINVFILE="/tmp/$( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-12} | head -n 1)"
	TMPRESFILE="${TMPINVFILE}-res"
	if [ -f ${TMPINVFILE} ]
	then
		if [ ! -w  ${TMPINVFILE} ]
		then
			echo "Sorry, can not write to the file  ${TMPINVFILE}"
			exit 4
		fi
	fi
	if [ -f ${TMPRESFILE} ]
        then
                if [ ! -w  ${TMPRESFILE} ]
                then
                        echo "Sorry, can not write to the file  ${TMPRESFILE}"
                        exit 4
                fi
        fi
cat <<EOT >> ${DATAFILE}
MASTERNODENAME: ${MASTERNODEHOSTNAME}
MASTERNODEIP: ${MASTERNODEIP}
MASTERSTORAGE: ${MASTERSTORAGE}
SSHUSER: ${SSHUSER}
SSHPASS: ${SSHPASS} 
BECOMEPASS: ${BECOMEPASS} 
MDNSIF: ${MDNSIF}
WORKERNODES:
EOT
CLUSTERMEMBERS=${MASTERNODEHOSTNAME}
cat <<EOT >> ${DATARESFILE}
MASTERNODENAME: ${MASTERNODEHOSTNAME}
MASTERSTORAGE: ${MASTERSTORAGE}
MASTERSTORAGEIP: ${MASTERSTIP}
WORKERNODES:
EOT
	CO=1
	for k in ${!WORKERSNODES[@]}
	do
	 CLUSTERMEMBERS="${CLUSTERMEMBERS} ${k}"
         echo " - HOSTNAME: ${k}" >> ${DATAFILE}
         echo "   IP: ${WORKERSNODES[$k]}" >> ${DATAFILE}
	 echo "   STORAGE: ${WORKERSTORAGE[$k]}" >> ${DATAFILE}
	 echo " - HOSTNAME: ${k}" >> ${DATARESFILE}
	 echo "   NODECOUNTER: ${CO}" >> ${DATARESFILE}
	 echo "   STORAGE: ${WORKERSTORAGE[$k]}" >> ${DATARESFILE}
	 echo "   STORAGEIP: ${WORKERNODESTIP[$k]}" >> ${DATARESFILE}
	 CO=$[CO+1]
   	done
	echo "Generating ansible inventory file from template file templs/inventoryfile"
	j2 templs/inventoryfile ${DATAFILE} > ${TMPINVFILE} 2> /dev/null
	if [ $? -ne 0 ]
	then
		echo "Can not generate inventory file ${TMPINVFILE}, run the following command for further investigation"
		echo "j2 templs/inventoryfile ${DATAFILE} > ${TMPINVFILE}"
		exit 5
	fi
	echo "Generating DRBD resource configuration file templs/pc2data.res.j2"
        j2 templs/pc2data.res.j2 ${DATARESFILE} > ${TMPRESFILE} 2> /dev/null
	if [ $? -ne 0 ]
        then
                echo "Can not generate PC2 data resoruce file ${TMPRESFILE}, run the following command for further investigation"
                echo "j2 templs/pc2data.res.j2 ${DATARESFILE} > ${TMPRESFILE}"
                exit 7
        fi
	if [ -f ${DATAFILE} ]
	then
			rm ${DATAFILE}
	fi
	if [ -f ${DATARESFILE} ]
	then
		rm ${DATARESFILE}
	fi

	PC2FILENAME=$(basename "${PC2PACKAGE}")
	if [ ! -f files/${PC2FILENAME} ]
	then
		echo "Downloading PC2 package from ${PC2PACKAGE}"
		wget -q --show-progress  -P files/ "${PC2PACKAGE}"
	fi
	echo "pc2file=${PC2FILENAME}" >> ${TMPINVFILE}
	PC2RESOURCEFILENAME=$(basename "${PC2RESOURCEAGENT}")
	if [ ! -f files/${PC2RESOURCEFILENAME} ]
	then
		echo "Downloading PC2 resource agent from ${PC2RESOURCEAGENT}"
		wget -q --show-progress  -P files/ ${PC2RESOURCEAGENT}
	fi
	echo "resourceagent=${PC2RESOURCEFILENAME}" >> ${TMPINVFILE}
	echo "clusterpassword=${CLUSERPASS}" >> ${TMPINVFILE}
	echo "clustermembers=${CLUSTERMEMBERS}" >> ${TMPINVFILE}
	echo "clustervip=${VIP}" >> ${TMPINVFILE}
	### Here, encrypt TMPINVFILE 
	ansible-vault encrypt ${TMPINVFILE}
	echo "The inventory file has been written to ${TMPINVFILE}"
	echo "The pc2data resource file has been written to ${TMPRESFILE}"
	echo "!! WARNING: Do not forget to download resource agent file ${PC2RESOURCEAGENT} and store it in directory files !!"
	echo "Do not forget :"
	echo -e "\t\t1- Copy ${TMPINVFILE} to hosts file : cp ${TMPINVFILE} ./hosts "
	echo -e "\t\t2- Copy ${TMPRESFILE} to directory files : cp ${TMPRESFILE} ./files/pc2data.res "
	echo -e "\t\t\tNote: The file name must be pc2data.res"
	echo -e "\t\t3- Stores a copy of PC2 resource agent in directory \"files\""
	echo -e "\t\t4- Do not forget to add --ask-vault-pass to your ansible-playbook"
}

echo "Pacemaker Cluster manager setup parameters:"
echo "Pacemaker cluster manager has one master node, and one or multiple slave nodes"
echo "The playbook, setup an Active/Passive cluser to run PC2"
echo "The hostname contains characters, numbers, _ "
### Start by checking needed packages
NEEDEDPACKAGES=(["ipcalc"]="ipcalc" ["ansible"]="ansible" ["sshpass"]="sshpass" ["j2"]="jinja2" ["pip3"]="python3-pip" ["openssl"]="openssl" ["ansible"]="ansible")
checkPackages
## Check for inventory template  file
if [ ! -f templs/inventoryfile ]
then
	echo "Sorry, can not find the inventory template file templs/inventoryfile"
	exit 2
fi
## Check can read from template file
if [ ! -r templs/inventoryfile ]
then
	echo "Sorry, can not read from inventory template file templs/inventoryfile, check permissions"
	exit 3
fi
## Check for id_rsa.pub
if [ ! -f ~/.ssh/id_rsa.pub ]
then
	echo "Sorry, can not find id_rsa.pub, please create it. See ssh-keygen for more information"
	exit 6
fi
### Start reading master node info
MASTERNODEHOSTNAME=$(readInput "hostname" "Master node hostname")
MASTERNODEIP=$(readInput "ipv4" "Master node IP address")
MASTERSTORAGE=$(readInput "hostname" "Master node storage")
MASTERSTIP=$(readInput "ipv4" "Master storage ip address")
NOOFWORKERS=$(readInput "integer" "How many workers nodes")
for i in $(seq 1 ${NOOFWORKERS})
do
	CONT=1
	CURWORKERNODES=${!WORKERSNODES[@]}
	while [ ${CONT} -eq 1 ]
	do
		WORKERNODENAME=$(readInput "hostname" "Worker node ${i} hostname")
		###check if it is the same as master node name
		if [ ${WORKERNODENAME} == ${MASTERNODEHOSTNAME} ]
		then
			echo "Invalid worker name, it is the same as master node name"
		else
			CONT=0
		fi
		### Check if it is the same as any other work node name
		if [ ${CONT} -eq 0 ]
		then
			CONT=1
			CO=$(echo "${CURWORKERNODES}"|grep -w "${WORKERNODENAME}"| wc -l)
			if [ ${CO} -gt 0 ]
			then
				echo "Invalid worker name, it is duplicated"
			else
				CONT=0
			fi
		fi

	done
	#################### REad the IPs
	CONT=1
	CURWORKERNODES=${WORKERSNODES[*]}
	while [ ${CONT} -eq 1 ]
	do
		WORKERNODEIP=$(readInput "ipv4" "Worker node ${i} IP address")
	### Check if worker up exists/ or he same as master
	##Check if it is the same as master ip
		if [ ${WORKERNODEIP} == ${MASTERNODEIP} ]
		then
			echo "Invalid IP address, it is the same as the master node ip"
		else
			CONT=0
		fi
		if [ ${CONT} -eq 0 ]
		then
			CONT=1
		##Check if the ip is duplicated
			CO=$(echo "${CURWORKERNODES}"|grep -w "${WORKERNODEIP}"| wc -l)
                	if [ ${CO} -gt 0 ]
                	then
                        	echo "Invalid worker IP, it is duplicated"
                	else
                        	CONT=0
                	fi
		fi
	done
	#################### Read the storage networks
        WORKERST=$(readInput "hostname" "Worker node ${i} storage")
	WORKERNODESTORAGEIP=$(readInput "ipv4" "Worker node ${i} storage IP ")
	WORKERSNODES[${WORKERNODENAME}]=${WORKERNODEIP}
	WORKERSTORAGE[${WORKERNODENAME}]=${WORKERST}
	WORKERNODESTIP[${WORKERNODENAME}]=${WORKERNODESTORAGEIP}
done
SSHUSER=$(readInput "hostname" "Enter SSH user name")
SSHPASS=$(readInput "password" "Enter SSH Password ")
BECOMEPASS=$(readInput "password" "Enter become Password")
MDNSIF=$(readInput "hostname" "Enter MDNS name")
CLUSERPASS=$(readInput "password" "Enter HACluster password")
VIP=$(readInput "ipv4" "Enter floating IP address")
saveValues
exit 0

